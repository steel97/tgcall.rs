name: Build

on:
  workflow_call:
  push:
    branches:
      - master

jobs:
  windows-x86_64:
    name: windows x86_64
    runs-on: windows-latest
    env:
      build_toolchain: x86_64-pc-windows-msvc
      build_executable: tgcall.exe
      build_package_name: tgcall win-x86_64 (msvc)
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ env.build_toolchain }}
      - name: Build tgcall executable
        run: |
          $env:LOCAL_TDLIB_PATH="$(Get-Location)/tdlibs/windows/x86_64/tdlib"
          cargo build --target=${{ env.build_toolchain }} --release
          mkdir target/${{ env.build_toolchain }}/release/tgcall-bundle
          copy target/${{ env.build_toolchain }}/release/${{ env.build_executable }} target/${{ env.build_toolchain }}/release/tgcall-bundle
          copy tdlibs/windows/x86_64/tdlib/bin/*.dll target/${{ env.build_toolchain }}/release/tgcall-bundle
          copy config.json.example target/${{ env.build_toolchain }}/release/tgcall-bundle/config.json
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.build_package_name }}
          path: target/${{ env.build_toolchain }}/release/tgcall-bundle

  apple-darwin-aarch64:
    name: apple darwin aarch64
    runs-on: macos-latest
    env:
      build_toolchain: aarch64-apple-darwin
      build_executable: tgcall
      build_package_name: tgcall macos-aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ env.build_toolchain }}
      - name: Build tgcall executable
        run: |
          export LOCAL_TDLIB_PATH=$(pwd)/tdlibs/macos/arm64/tdlib
          cargo build --target=${{ env.build_toolchain }} --release
          mkdir target/${{ env.build_toolchain }}/release/tgcall-bundle
          cp target/${{ env.build_toolchain }}/release/${{ env.build_executable }} target/${{ env.build_toolchain }}/release/tgcall-bundle/${{ env.build_executable }}
          cp tdlibs/macos/arm64/tdlib/lib/*.dylib* target/${{ env.build_toolchain }}/release/tgcall-bundle
          cp config.json.example target/${{ env.build_toolchain }}/release/tgcall-bundle/config.json
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.build_package_name }}
          path: target/${{ env.build_toolchain }}/release/tgcall-bundle

  linux-x86_64:
    name: linux x86_64
    runs-on: ubuntu-latest
    env:
      build_toolchain: x86_64-unknown-linux-gnu
      build_executable: tgcall
      build_package_name: tgcall linux-x86_64 (glibc)
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ env.build_toolchain }}
      - name: Build tgcall executable
        run: |
          export LOCAL_TDLIB_PATH=$(pwd)/tdlibs/linux/x86_64/tdlib
          cargo build --target=${{ env.build_toolchain }} --release
          mkdir target/${{ env.build_toolchain }}/release/tgcall-bundle
          cp target/${{ env.build_toolchain }}/release/${{ env.build_executable }} target/${{ env.build_toolchain }}/release/tgcall-bundle/${{ env.build_executable }}
          cp tdlibs/linux/x86_64/tdlib/lib/*.so* target/${{ env.build_toolchain }}/release/tgcall-bundle
          cp run.sh target/${{ env.build_toolchain }}/release/tgcall-bundle/run.sh
          cp config.json.example target/${{ env.build_toolchain }}/release/tgcall-bundle/config.json
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.build_package_name }}
          path: target/${{ env.build_toolchain }}/release/tgcall-bundle