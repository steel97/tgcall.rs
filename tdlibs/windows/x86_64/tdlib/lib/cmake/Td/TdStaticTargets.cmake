# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.28)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS Td::tdutils Td::tdactor Td::tdnet Td::tdsqlite Td::tddb Td::tdjson_static Td::TdJsonStatic Td::tdjson_private Td::tdcore Td::tdclient Td::TdStatic Td::tdapi)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target Td::tdutils
add_library(Td::tdutils STATIC IMPORTED)

set_target_properties(Td::tdutils PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/libcrypto.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/libcrypto.lib>;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/zlib.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/zlibd.lib>;\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:Mswsock>;\$<LINK_ONLY:Crypt32>;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/zlib.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/zlibd.lib>;\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:Mswsock>;\$<LINK_ONLY:Normaliz>;\$<LINK_ONLY:psapi>;\$<LINK_ONLY:shell32>"
)

# Create imported target Td::tdactor
add_library(Td::tdactor STATIC IMPORTED)

set_target_properties(Td::tdactor PROPERTIES
  INTERFACE_LINK_LIBRARIES "Td::tdutils"
)

# Create imported target Td::tdnet
add_library(Td::tdnet STATIC IMPORTED)

set_target_properties(Td::tdnet PROPERTIES
  INTERFACE_LINK_LIBRARIES "Td::tdutils;Td::tdactor;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/libssl.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/libssl.lib>;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/libcrypto.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/libcrypto.lib>;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/zlib.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/zlibd.lib>;\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:Mswsock>;\$<LINK_ONLY:Crypt32>"
)

# Create imported target Td::tdsqlite
add_library(Td::tdsqlite STATIC IMPORTED)

set_target_properties(Td::tdsqlite PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/libcrypto.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/libcrypto.lib>;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/zlib.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/zlibd.lib>;\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:Mswsock>;\$<LINK_ONLY:Crypt32>"
)

# Create imported target Td::tddb
add_library(Td::tddb STATIC IMPORTED)

set_target_properties(Td::tddb PROPERTIES
  INTERFACE_LINK_LIBRARIES "Td::tdactor;Td::tdutils;\$<LINK_ONLY:Td::tdsqlite>"
)

# Create imported target Td::tdjson_static
add_library(Td::tdjson_static STATIC IMPORTED)

set_target_properties(Td::tdjson_static PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TDJSON_STATIC_DEFINE"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:Td::tdjson_private>"
)

# Create imported target Td::TdJsonStatic
add_library(Td::TdJsonStatic INTERFACE IMPORTED)

set_target_properties(Td::TdJsonStatic PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Td::tdjson_static"
)

# Create imported target Td::tdjson_private
add_library(Td::tdjson_private STATIC IMPORTED)

set_target_properties(Td::tdjson_private PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Td::tdclient;Td::tdutils"
)

# Create imported target Td::tdcore
add_library(Td::tdcore STATIC IMPORTED)

set_target_properties(Td::tdcore PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Td::tdapi;Td::tdactor;Td::tdutils;Td::tdnet;Td::tddb;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/libcrypto.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/libcrypto.lib>;\$<\$<NOT:\$<CONFIG:DEBUG>>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/lib/zlib.lib>;\$<\$<CONFIG:DEBUG>:D:/a/tdlib-rs/tdlib-rs/td/vcpkg/installed/x64-windows/debug/lib/zlibd.lib>;\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:Mswsock>;\$<LINK_ONLY:Crypt32>"
)

# Create imported target Td::tdclient
add_library(Td::tdclient STATIC IMPORTED)

set_target_properties(Td::tdclient PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Td::tdapi;\$<LINK_ONLY:Td::tdcore>"
)

# Create imported target Td::TdStatic
add_library(Td::TdStatic INTERFACE IMPORTED)

set_target_properties(Td::TdStatic PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Td::tdclient"
)

# Create imported target Td::tdapi
add_library(Td::tdapi STATIC IMPORTED)

set_target_properties(Td::tdapi PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:Td::tdutils>"
)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/TdStaticTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
